get.analysis.by.id=SELECT AE.ANALYSIS_EXP_ID, AE.PROJECT_ID, AE.TEAM_ID, AE.ANALYSIS_NAME, AE.SUMMARY, AE.STATUS, AE.BATCH_SIZE, AE.BATCH_NUMBER, AE.ANALYSIS_SUBMIT_DATE, AE.INSERT_DATE, AED.ANALYSIS_EXP_DTL_ID, AED.NAME, T.TRF_ID, T.EXP_ID, T.TEST_ID, T.TEST_NAME, T.TEST_NUMBER, T.TEST_RESULT, T.TEST_STATUS FROM ANALYSIS_EXPERIMENT AE JOIN ANALYSIS_EXP_DETAILS AED ON AE.ANALYSIS_EXP_ID = AED.ANALYSIS_EXP_ID JOIN TRF T ON AE.ANALYSIS_EXP_ID = T.ANALYSIS_EXP_ID WHERE AE.ANALYSIS_EXP_ID = 
#SELECT AE.ANALYSIS_EXP_ID, AE.PROJECT_ID, AE.TEAM_ID, AE.ANALYSIS_NAME, AE.SUMMARY, AE.STATUS, AED.ANALYSIS_EXP_DTL_ID, AED.NAME, AEX.ANALYSIS_EXCIPIENT_ID, AEX.EXCIPIENT_ID, AEX.MATERIAL_TYPE, AEX.MATERIAL_NAME, AEX.BATCH_NO, AEX.SOURCE_NAME, AEX.POTENCY, AEX.GRADE, T.TRF_ID, T.EXP_ID, T.TEST_ID, T.TEST_NAME, T.TEST_NUMBER, T.TEST_RESULT, T.TEST_STATUS FROM ANALYSIS_EXPERIMENT AE JOIN ANALYSIS_EXP_DETAILS AED ON AE.ANALYSIS_EXP_ID = AED.ANALYSIS_EXP_ID JOIN ANALYSIS_EXCIPIENTS AEX ON AE.ANALYSIS_EXP_ID = AEX.ANALYSIS_EXP_ID JOIN TRF T ON AE.ANALYSIS_EXP_ID = T.ANALYSIS_EXP_ID WHERE AE.ANALYSIS_EXP_ID =
get.analysis.list=SELECT AE.ANALYSIS_EXP_ID, AE.PROJECT_ID, AE.TEAM_ID, AE.ANALYSIS_NAME, AE.SUMMARY, AE.STATUS, AE.USER_ID, AE.BATCH_SIZE, AE.BATCH_NUMBER, AE.INSERT_DATE, AE.INSERT_USER, AE.UPDATE_DATE, AE.UPDATE_USER, P.PROJECT_ID, P.PROJECT_NAME, P.DOSAGE_NAME, P.FORMULATION_NAME, P.MARKET_NAME, P.PRODUCT_NAME, P.STRENGTH, P.TEAM_NAME, P.DOSAGE_ID, P.FORMULATION_ID, P.MARKET_ID, P.PRODUCT_ID FROM ANALYSIS_EXPERIMENT AE JOIN PROJECT P ON AE.PROJECT_ID = P.PROJECT_ID WHERE 1 = 1
#get.analysis.list=SELECT AE.ANALYSIS_EXP_ID, AE.PROJECT_ID, AE.TEAM_ID, AE.ANALYSIS_NAME, AE.SUMMARY, AE.STATUS, AED.ANALYSIS_EXP_DTL_ID, AED.NAME, AEX.ANALYSIS_EXCIPIENT_ID, AEX.EXCIPIENT_ID, AEX.MATERIAL_TYPE, AEX.MATERIAL_NAME, AEX.BATCH_NO, AEX.SOURCE_NAME, AEX.POTENCY, AEX.GRADE, T.TRF_ID, T.EXP_ID, T.TEST_ID, T.TEST_NAME, T.TEST_NUMBER, T.TEST_RESULT, T.TEST_STATUS FROM ANALYSIS_EXPERIMENT AE JOIN ANALYSIS_EXP_DETAILS AED ON AE.ANALYSIS_EXP_ID = AED.ANALYSIS_EXP_ID JOIN ANALYSIS_EXCIPIENTS AEX ON AE.ANALYSIS_EXP_ID = AEX.ANALYSIS_EXP_ID JOIN TRF T ON AE.ANALYSIS_EXP_ID = T.ANALYSIS_EXP_ID WHERE 1 = 1
create.analysis=INSERT INTO ANALYSIS_EXPERIMENT(PROJECT_ID, TEAM_ID, ANALYSIS_NAME, SUMMARY, STATUS, USER_ID, BATCH_SIZE, BATCH_NUMBER, INSERT_DATE, INSERT_USER, UPDATE_DATE, UPDATE_USER) VALUES ( :projectId, :teamId, :analysisName, :summary, :status, :userId, :batchSize, :batchNumber, :insertDate, :insertUser, :updateDate, :updateUser); 
update.analysis=UPDATE ANALYSIS_EXPERIMENT SET PROJECT_ID = :projectId, TEAM_ID = :teamId, ANALYSIS_NAME = :analysisName, SUMMARY = :summary, STATUS = :status, USER_ID = :userId, BATCH_SIZE = :batchSize, BATCH_NUMBER = :batchNumber, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE ANALYSIS_EXP_ID = :analysisId  AND 1=1
delete.analysis=DELETE FROM ANALYSIS_EXPERIMENT WHERE ANALYSIS_EXP_ID=?
get.analysis.by.id.with.out.trf=SELECT AE.ANALYSIS_EXP_ID, AE.PROJECT_ID, AE.TEAM_ID, AE.ANALYSIS_NAME, AE.SUMMARY, AE.STATUS, AE.BATCH_SIZE, AE.BATCH_NUMBER, AE.USER_ID, AE.ANALYSIS_SUBMIT_DATE, AE.INSERT_DATE, AED.ANALYSIS_EXP_DTL_ID, AED.NAME FROM ANALYSIS_EXPERIMENT AS AE INNER JOIN ANALYSIS_EXP_DETAILS AS AED ON AE.ANALYSIS_EXP_ID = AED.ANALYSIS_EXP_ID WHERE AE.ANALYSIS_EXP_ID = 
update.analysis.status=UPDATE ANALYSIS_EXPERIMENT SET STATUS = :status, SUMMARY = :summary, ANALYSIS_SUBMIT_DATE = :analysisSubmitDate WHERE ANALYSIS_EXP_ID = :analysisId

#DETAILS
get.analysis.details.by.id=SELECT ANALYSIS_EXP_DTL_ID, ANALYSIS_EXP_ID, LOB_DETAILS, NAME, STATUS, INSERT_USER, INSERT_DATE, UPDATE_USER,UPDATE_DATE FROM ANALYSIS_EXP_DETAILS WHERE ANALYSIS_EXP_DTL_ID =
get.analysis.details.list=SELECT ANALYSIS_EXP_DTL_ID, ANALYSIS_EXP_ID, LOB_DETAILS, NAME, STATUS, INSERT_USER, INSERT_DATE, UPDATE_USER,UPDATE_DATE FROM ANALYSIS_EXP_DETAILS WHERE 1 = 1
create.analysis.details=INSERT INTO ANALYSIS_EXP_DETAILS (ANALYSIS_EXP_ID, LOB_DETAILS, NAME, STATUS, INSERT_DATE, INSERT_USER, UPDATE_DATE, UPDATE_USER) VALUES (:analysisId, :fileContent, :name, :status, :insertDate, :insertUser, :updateDate, :updateUser)
update.analysis.details=UPDATE ANALYSIS_EXP_DETAILS SET ANALYSIS_EXP_ID = :analysisId, LOB_DETAILS = :fileContent, NAME = :name, STATUS = :status, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE ANALYSIS_EXP_DTL_ID = :analysisDetailId

#EXCIPIENT
get.excipients.by.analysisId=SELECT AE.ANALYSIS_EXCIPIENT_ID, AE.EXCIPIENT_ID, AE.ANALYSIS_EXP_ID, AE.MATERIAL_NAME, AE.MATERIAL_TYPE, AE.BATCH_NO, AE.SOURCE_NAME, AE.POTENCY, AE.GRADE, E.EXCIPIENTS_NAME, AE.STATUS FROM ANALYSIS_EXCIPIENTS AE JOIN EXCIPIENTS E ON AE.EXCIPIENT_ID = E.EXCIPIENT_ID WHERE AE.ANALYSIS_EXP_ID = :analysisId
create.analysis.excipient=INSERT INTO ANALYSIS_EXCIPIENTS(EXCIPIENT_ID, ANALYSIS_EXP_ID, MATERIAL_TYPE, MATERIAL_NAME, BATCH_NO, SOURCE_NAME, POTENCY, GRADE, STATUS, INSERT_DATE, INSERT_USER, UPDATE_DATE, UPDATE_USER) VALUES (:excipientId, :analysisId, :materialType, :materialName, :batchNo, :sourceName, :potency, :grade, :status, :insertDate, :insertUser, :updateDate, :updateUser)
update.analysis.excipient=UPDATE ANALYSIS_EXCIPIENTS SET EXCIPIENT_ID = :excipientId, ANALYSIS_EXP_ID = :analysisId, MATERIAL_TYPE = :materialType, MATERIAL_NAME = :materialName, BATCH_NO = :batchNo, SOURCE_NAME = :sourceName, POTENCY = :potency, GRADE = :grade, STATUS = :status, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE ANALYSIS_EXCIPIENT_ID = :excipientId  AND 1=1
delete.analysis.excipient=DELETE FROM ANALYSIS_EXCIPIENTS WHERE ANALYSIS_EXP_ID=
#ATTACHMENTS
get.analysis.attachment.by.id=SELECT ANALYSIS_ATT_ID, ANALYSIS_EXP_ID, ATTACHMENT_LOCATION, STATUS, FROM_SUMMARY, INSERT_USER, INSERT_DATE, UPDATE_USER, UPDATE_DATE FROM ANALYSIS_ATTACHMENT WHERE ANALYSIS_ATT_ID =
get.analysis.attachment.list=SELECT ANALYSIS_ATT_ID, ANALYSIS_EXP_ID, ATTACHMENT_LOCATION, STATUS, FROM_SUMMARY, INSERT_USER, INSERT_DATE, UPDATE_USER, UPDATE_DATE FROM ANALYSIS_ATTACHMENT WHERE 1 = 1
create.analysis.attachment=INSERT ANALYSIS_ATTACHMENT (ANALYSIS_EXP_ID, ATTACHMENT_LOCATION, STATUS, FROM_SUMMARY, INSERT_USER, INSERT_DATE, UPDATE_USER, UPDATE_DATE) VALUES(:experimentId, :attachmentLocation, :status, :fromSummary, :insertUser, :insertDate, :updateUser, :updateDate)
update.analysis.attachment=UPDATE ANALYSIS_ATTACHMENT SET ANALYSIS_EXP_ID = :experimentId, ATTACHMENT_LOCATION = :attachmentLocation, STATUS = :status, FROM_SUMMARY = :fromSummary, UPDATE_USER = :updateUser, UPDATE_DATE = :updateDate WHERE ANALYSIS_ATT_ID = :analysisAttachmentId

#TRF
update.trf=UPDATE TRF SET ANALYSIS_EXP_ID = ?, TRF_STATUS = ?, UPDATE_USER = ?, UPDATE_DATE = ? WHERE TRF_ID = ?
update.trf.status=UPDATE TRF SET TRF_STATUS = :testRequestFormStatus, UPDATE_USER = :updateUser, UPDATE_DATE = :updateDate WHERE ANALYSIS_EXP_ID = :analysisId
trfs.by.analysi.id=SELECT TRF_ID, EXP_ID, TRF_STATUS, CONDITION, STAGE, PACKAGING, LABEL_CLAIM, QUANTITY, MANUFACTURING_DATE, EXPIRE_DATE, TEST_ID, TEST_NAME, TEST_NUMBER, TEST_RESULT, STATUS, ANALYSIS_EXP_ID, TEST_STATUS FROM TRF WHERE ANALYSIS_EXP_ID =
update.test.request.form.results=UPDATE TRF SET EXP_ID = :expId, TRF_STATUS = :testRequestFormStatus, CONDITION = :condition, STAGE = :stage, PACKAGING = :packaging, LABEL_CLAIM = :labelClaim, QUANTITY = :quantity, MANUFACTURING_DATE = :manufacturingDate, EXPIRE_DATE = :expireDate, STATUS = :status, TEST_ID = :testId, TEST_NAME = :testName, TEST_NUMBER = :testNumber, TEST_RESULT = :testResult, TEST_STATUS = :testStatus, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE ANALYSIS_EXP_ID = :analysisId and TRF_ID = :testRequestFormId

#REVIEW
create.anlaysis.review=INSERT INTO ANALYSIS_REVIEW(ANALYSIS_EXP_ID, REVIEW_USER_ID, COMMENTS, INSERT_DATE, INSERT_USER, UPDATE_DATE, UPDATE_USER) VALUES(:analysisId, :reviewUserId, :comments, :insertDate, :insertUser, :updateDate, :updateUser)
update.anlaysis.review=UPDATE ANALYSIS_REVIEW SET COMMENTS = :comments, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE ANALYSIS_REVIEW_ID = :analysisReviewId
get.anlaysis.review=SELECT AR.ANALYSIS_REVIEW_ID, AR.ANALYSIS_EXP_ID, AR.COMMENTS, AR.REVIEW_USER_ID FROM ANALYSIS_REVIEW AR WHERE AR.ANALYSIS_EXP_ID = :analysisId