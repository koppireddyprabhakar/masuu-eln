get.experiment.by.id=SELECT E.EXP_ID, E.PROJECT_ID PROJECTID, E.TEAM_ID TEAMID, E.USER_ID, E.EXPERIMENT_NAME, E.EXPERIMENT_STATUS, E.SUMMARY, E.BATCH_SIZE, E.BATCH_NUMBER, E.STATUS, E.INSERT_DATE, E.INSERT_USER, E.UPDATE_DATE, E.UPDATE_USER, E.ANALYSIS_SUBMIT_DATE, ED.EXP_DETAIL_ID, ED.NAME, ED.STATUS FROM EXPERIMENT E JOIN EXPERIMENT_DETAILS ED ON E.EXP_ID = ED.EXP_ID WHERE E.EXP_ID IN (:experimentId)
get.experiment.by.ids=SELECT E.EXP_ID, E.PROJECT_ID PROJECTID, E.TEAM_ID TEAMID, E.USER_ID, E.EXPERIMENT_NAME, E.EXPERIMENT_STATUS, E.SUMMARY, E.BATCH_SIZE, E.BATCH_NUMBER, E.STATUS, E.INSERT_DATE, E.INSERT_USER, E.UPDATE_DATE, E.UPDATE_USER, E.ANALYSIS_SUBMIT_DATE, ED.EXP_DETAIL_ID, ED.NAME, ED.STATUS FROM EXPERIMENT E JOIN EXPERIMENT_DETAILS ED ON E.EXP_ID = ED.EXP_ID WHERE E.EXP_ID IN 
get.experiment.list=SELECT E.EXP_ID, E.PROJECT_ID PROJECTID, E.TEAM_ID TEAMID, E.USER_ID, E.EXPERIMENT_NAME, E.EXPERIMENT_STATUS, E.SUMMARY, E.BATCH_SIZE, E.BATCH_NUMBER, E.STATUS, E.INSERT_DATE, E.INSERT_USER, E.UPDATE_DATE, E.UPDATE_USER, E.ANALYSIS_SUBMIT_DATE, P.PROJECT_ID, P.PROJECT_NAME, P.PRODUCT_ID, P.PRODUCT_NAME, P.PRODUCT_CODE, P.STATUS, P.STRENGTH, P.DOSAGE_ID, P.DOSAGE_NAME, P.FORMULATION_ID, P.FORMULATION_NAME, P.TEAM_ID, P.TEAM_NAME, P.MARKET_ID, P.MARKET_NAME FROM EXPERIMENT E JOIN PROJECT P ON E.PROJECT_ID = P.PROJECT_ID WHERE 1=1
create.experiment=INSERT INTO EXPERIMENT(PROJECT_ID, TEAM_ID, USER_ID, EXPERIMENT_NAME, EXPERIMENT_STATUS, SUMMARY, BATCH_SIZE, BATCH_NUMBER, STATUS, INSERT_DATE, INSERT_USER, UPDATE_DATE, UPDATE_USER) VALUES ( :projectId, :teamId, :userId, :experimentName, :experimentStatus, :summary, :batchSize, :batchNumber, :status, :insertDate, :insertUser, :updateDate, :updateUser)
update.experiment=UPDATE EXPERIMENT SET PROJECT_ID = :projectId, TEAM_ID = :teamId, USER_ID = :userId, EXPERIMENT_NAME = :experimentName, EXPERIMENT_STATUS = :experimentStatus, SUMMARY = :summary, BATCH_SIZE = :batchSize, BATCH_NUMBER = :batchNumber, STATUS = :status, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE EXP_ID = :expId  AND 1=1 
delete.experiment=DELETE FROM EXPERIMENT WHERE EXP_ID=?
update.experiment.status=UPDATE EXPERIMENT SET EXPERIMENT_STATUS = :experimentStatus, STATUS= :status, ANALYSIS_SUBMIT_DATE = :analysisSubmitDate WHERE EXP_ID = :experimentId

get.experiment.project=SELECT EX.EXP_ID, EX.EXPERIMENT_NAME, EX.EXPERIMENT_STATUS, EX.SUMMARY, EX.PROJECT_ID PROJECTID, EX.TEAM_ID TEAMID, EX.USER_ID, EX.INSERT_DATE, EX.INSERT_USER, EX.UPDATE_DATE, EX.UPDATE_USER, P.PROJECT_ID, P.PROJECT_NAME, P.PRODUCT_ID, P.PRODUCT_CODE, P.PRODUCT_NAME, P.STRENGTH, P.DOSAGE_ID, P.DOSAGE_NAME, P.FORMULATION_ID, P.FORMULATION_NAME, P.TEAM_ID, P.TEAM_NAME, P.MARKET_ID, P.MARKET_NAME, P.STATUS FROM EXPERIMENT EX LEFT JOIN PROJECT P ON EX.PROJECT_ID = P.PROJECT_ID
get.experiment.info=SELECT  EX.EXP_ID, EX.EXPERIMENT_NAME, EX.EXPERIMENT_STATUS, EX.SUMMARY, EX.PROJECT_ID PROJECTID, EX.TEAM_ID TEAMID, EX.USER_ID, EX.BATCH_SIZE, EX.BATCH_NUMBER, EX.INSERT_DATE, EX.INSERT_USER, EX.UPDATE_DATE, EX.UPDATE_USER, P.PROJECT_ID, P.PROJECT_NAME, P.PRODUCT_ID, P.PRODUCT_CODE, P.PRODUCT_NAME, P.STRENGTH, P.DOSAGE_ID, P.DOSAGE_NAME, P.FORMULATION_ID, P.FORMULATION_NAME, P.TEAM_ID, P.TEAM_NAME, P.MARKET_ID, P.MARKET_NAME, P.STATUS, ED.EXP_DETAIL_ID, ED.EXP_ID, ED.LOB_DETAILS, ED.NAME, ED.STATUS, EC.EXCIPIENT_ID, EC.EXP_ID, EC.MATERIAL_TYPE, EC.MATERIAL_NAME, EC.BATCH_NO, EC.SOURCE_NAME, EC.POTENCY, EC.GRADE, EC.STATUS, D.DEPARTMENT_NAME FROM EXPERIMENT EX LEFT JOIN PROJECT P ON EX.PROJECT_ID = P.PROJECT_ID LEFT JOIN EXPERIMENT_DETAILS ED ON EX.EXP_ID = ED.EXP_ID LEFT JOIN EXP_EXCIPIENTS EC ON EX.EXP_ID = EC.EXP_ID JOIN USERS_DETAILS UD ON EX.USER_ID = UD.USER_ID JOIN DEPARTMENT D ON UD.DEPT_ID = D.DEPT_ID WHERE EX.EXP_ID = 

#EXPERIMENT DETAILS
get.experiment.details.by.id=SELECT EXP_DETAIL_ID, EXP_ID, LOB_DETAILS, NAME, STATUS, INSERT_USER, INSERT_DATE, UPDATE_USER,UPDATE_DATE FROM EXPERIMENT_DETAILS WHERE EXP_DETAIL_ID =
get.experiment.details.list=SELECT EXP_DETAIL_ID, EXP_ID, LOB_DETAILS, NAME, STATUS, INSERT_USER, INSERT_DATE, UPDATE_USER,UPDATE_DATE FROM EXPERIMENT_DETAILS WHERE 1 = 1
create.experiment.details=INSERT INTO EXPERIMENT_DETAILS (EXP_ID, LOB_DETAILS, NAME, STATUS, INSERT_DATE, INSERT_USER, UPDATE_DATE, UPDATE_USER) VALUES (:experimentId, :fileContent, :name, :status, :insertDate, :insertUser, :updateDate, :updateUser)
update.experiment.details=UPDATE EXPERIMENT_DETAILS SET EXP_ID = :experimentId, LOB_DETAILS = :fileContent, NAME = :name, STATUS = :status, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE EXP_DETAIL_ID = :experimentDetailId

#EXCIPIENT
get.excipients.by.experimentId=SELECT EE.EXCIPIENT_ID, EE.EXP_ID, EE.MATERIAL_NAME, EE.MATERIAL_TYPE, EE.BATCH_NO, EE.SOURCE_NAME, EE.POTENCY, EE.GRADE, EE.STATUS FROM EXP_EXCIPIENTS EE WHERE EE.EXP_ID = :experimentId 
create.experiment.excipient=INSERT INTO EXP_EXCIPIENTS(EXCIPIENT_ID, EXP_ID, MATERIAL_TYPE, MATERIAL_NAME, BATCH_NO, SOURCE_NAME, POTENCY, GRADE, STATUS, INSERT_DATE, INSERT_USER, UPDATE_DATE, UPDATE_USER) VALUES ( :excipientId, :experimentId, :materialType, :materialName, :batchNo, :sourceName, :potency, :grade, :status, :insertDate, :insertUser, :updateDate, :updateUser)
update.experiment.excipient=UPDATE EXP_EXCIPIENTS SET EXCIPIENT_ID = :excipientId, EXP_ID = :experimentId, MATERIAL_TYPE = :materialType, MATERIAL_NAME = :materialName, BATCH_NO = :batchNo, SOURCE_NAME = :sourceName, POTENCY = :potency, GRADE = :grade, STATUS = :status, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE 1=1 AND EXCIPIENT_ID = :excipientId
delete.experiment.excipient=DELETE FROM EXP_EXCIPIENTS WHERE EXP_ID =?

#EXPERIMENT ATTACHMENT
get.experiment.attachment.by.id=SELECT EXP_ATT_ID, EXP_ID, ATTACHMENT_LOCATION, STATUS, INSERT_USER, INSERT_DATE, UPDATE_USER, UPDATE_DATE FROM EXPERIMENT_ATTACHMENT WHERE EXP_ATT_ID =
get.experiment.attachment.list=SELECT EXP_ATT_ID, EXP_ID, ATTACHMENT_LOCATION, STATUS, INSERT_USER, INSERT_DATE, UPDATE_USER, UPDATE_DATE FROM EXPERIMENT_ATTACHMENT WHERE 1 = 1
create.experiment.attachment=INSERT EXPERIMENT_ATTACHMENT (EXP_ID, ATTACHMENT_LOCATION, STATUS, INSERT_USER, INSERT_DATE, UPDATE_USER, UPDATE_DATE) VALUES(:experimentId, :attachmentLocation, :status, :insertUser, :insertDate, :updateUser, :updateDate)
update.experiment.attachment=UPDATE EXPERIMENT_ATTACHMENT SET EXP_ID = :experimentId, ATTACHMENT_LOCATION = :attachmentLocation, STATUS = :status, UPDATE_USER = :updateUser, UPDATE_DATE = :updateDate WHERE EXP_ATT_ID = :experimentAttachmentId

#TRF
get.trf.by.exp.id=SELECT T.TRF_ID, T.EXP_ID, T.TRF_STATUS, T.CONDITION, T.STAGE, T.PACKAGING, T.LABEL_CLAIM, T.QUANTITY, T.MANUFACTURING_DATE, T.EXPIRE_DATE, T.TEST_ID, T.TEST_NAME, T.TEST_NUMBER, T.TEST_RESULT, T.STATUS, T.ANALYSIS_EXP_ID, T.TEST_STATUS FROM TRF T WHERE EXP_ID = :experimentId

#REVIEW
create.experiment.review=INSERT INTO EXPERIMENT_REVIEW(EXP_ID, REVIEW_USER_ID, COMMENTS, REVIEW_TYPE, INSERT_DATE, INSERT_USER, UPDATE_DATE, UPDATE_USER) VALUES(:experimentId, :reviewUserId, :comments, :reviewType, :insertDate, :insertUser, :updateDate, :updateUser)
update.experiment.review=UPDATE EXPERIMENT_REVIEW SET COMMENTS = :comments, UPDATE_DATE = :updateDate, UPDATE_USER = :updateUser WHERE EXP_REVIEW_ID = :experimentReviewId
get.experiment.review=SELECT ER.EXP_REVIEW_ID, ER.EXP_ID, ER.COMMENTS, ER.REVIEW_USER_ID, ER.REVIEW_TYPE FROM EXPERIMENT_REVIEW ER WHERE ER.EXP_ID = :experimentId